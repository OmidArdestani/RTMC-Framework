{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "RT-Micro-C",
  "scopeName": "source.rtmc",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#rtos-functions"
    },
    {
      "include": "#hardware-functions"
    },
    {
      "include": "#debug-functions"
    },
    {
      "include": "#task-definition"
    },
    {
      "include": "#struct-definition"
    },
    {
      "include": "#function-definition"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#preprocessor"
    },
    {
      "include": "#identifiers"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.rtmc",
          "begin": "//",
          "end": "$"
        },
        {
          "name": "comment.block.rtmc",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.rtmc",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.rtmc",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.single.rtmc",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.rtmc",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.float.rtmc",
          "match": "\\b[0-9]+\\.[0-9]+([eE][+-]?[0-9]+)?[fF]?\\b"
        },
        {
          "name": "constant.numeric.integer.hexadecimal.rtmc",
          "match": "\\b0[xX][0-9a-fA-F]+\\b"
        },
        {
          "name": "constant.numeric.integer.binary.rtmc",
          "match": "\\b0[bB][01]+\\b"
        },
        {
          "name": "constant.numeric.integer.octal.rtmc",
          "match": "\\b0[0-7]+\\b"
        },
        {
          "name": "constant.numeric.integer.decimal.rtmc",
          "match": "\\b[0-9]+\\b"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.rtmc",
          "match": "\\b(if|else|while|for|break|continue|return|switch|case|default)\\b"
        },
        {
          "name": "storage.type.rtmc",
          "match": "\\b(int|float|char|bool|void|const|struct|Task|message)\\b"
        },
        {
          "name": "storage.modifier.rtmc",
          "match": "\\b(const|static|extern|volatile)\\b"
        },
        {
          "name": "constant.language.rtmc",
          "match": "\\b(true|false|null|NULL)\\b"
        },
        {
          "name": "keyword.other.rtmc",
          "match": "\\b(import|send|recv|sizeof|typedef)\\b"
        }
      ]
    },
    "rtos-functions": {
      "patterns": [
        {
          "name": "support.function.rtos.rtmc",
          "match": "\\b(RTOS_CREATE_TASK|RTOS_DELETE_TASK|RTOS_DELAY_MS|RTOS_SEMAPHORE_CREATE|RTOS_SEMAPHORE_TAKE|RTOS_SEMAPHORE_GIVE|RTOS_YIELD|RTOS_SUSPEND_TASK|RTOS_RESUME_TASK)\\b"
        }
      ]
    },
    "hardware-functions": {
      "patterns": [
        {
          "name": "support.function.hardware.gpio.rtmc",
          "match": "\\b(HW_GPIO_INIT|HW_GPIO_SET|HW_GPIO_GET)\\b"
        },
        {
          "name": "support.function.hardware.timer.rtmc",
          "match": "\\b(HW_TIMER_INIT|HW_TIMER_START|HW_TIMER_STOP|HW_TIMER_SET_PWM_DUTY)\\b"
        },
        {
          "name": "support.function.hardware.adc.rtmc",
          "match": "\\b(HW_ADC_INIT|HW_ADC_READ)\\b"
        },
        {
          "name": "support.function.hardware.uart.rtmc",
          "match": "\\b(HW_UART_WRITE|HW_UART_READ)\\b"
        },
        {
          "name": "support.function.hardware.spi.rtmc",
          "match": "\\b(HW_SPI_TRANSFER)\\b"
        },
        {
          "name": "support.function.hardware.i2c.rtmc",
          "match": "\\b(HW_I2C_WRITE|HW_I2C_READ)\\b"
        }
      ]
    },
    "debug-functions": {
      "patterns": [
        {
          "name": "support.function.debug.rtmc",
          "match": "\\b(DBG_PRINT|DBG_BREAKPOINT)\\b"
        }
      ]
    },
    "task-definition": {
      "patterns": [
        {
          "name": "meta.task.rtmc",
          "begin": "\\b(Task)\\s*<\\s*([0-9]+)\\s*,\\s*([0-9]+)\\s*>\\s+(\\w+)\\s*\\{",
          "beginCaptures": {
            "1": {
              "name": "storage.type.task.rtmc"
            },
            "2": {
              "name": "constant.numeric.core.rtmc"
            },
            "3": {
              "name": "constant.numeric.priority.rtmc"
            },
            "4": {
              "name": "entity.name.function.task.rtmc"
            }
          },
          "end": "\\}",
          "patterns": [
            {
              "include": "$self"
            }
          ]
        }
      ]
    },
    "struct-definition": {
      "patterns": [
        {
          "name": "meta.struct.rtmc",
          "begin": "\\b(struct)\\s+(\\w+)\\s*\\{",
          "beginCaptures": {
            "1": {
              "name": "storage.type.struct.rtmc"
            },
            "2": {
              "name": "entity.name.type.struct.rtmc"
            }
          },
          "end": "\\}",
          "patterns": [
            {
              "include": "#bitfield"
            },
            {
              "include": "$self"
            }
          ]
        }
      ]
    },
    "bitfield": {
      "patterns": [
        {
          "name": "meta.bitfield.rtmc",
          "match": "\\b(\\w+)\\s*:\\s*([0-9]+)\\s*;",
          "captures": {
            "1": {
              "name": "variable.other.member.rtmc"
            },
            "2": {
              "name": "constant.numeric.bitfield.rtmc"
            }
          }
        }
      ]
    },
    "function-definition": {
      "patterns": [
        {
          "name": "meta.function.rtmc",
          "begin": "\\b(void|int|float|char|bool)\\s+(\\w+)\\s*\\(",
          "beginCaptures": {
            "1": {
              "name": "storage.type.function.rtmc"
            },
            "2": {
              "name": "entity.name.function.rtmc"
            }
          },
          "end": "\\)",
          "patterns": [
            {
              "include": "$self"
            }
          ]
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.assignment.rtmc",
          "match": "(=|\\+=|-=|\\*=|/=|%=|&=|\\|=|\\^=|<<=|>>=)"
        },
        {
          "name": "keyword.operator.comparison.rtmc",
          "match": "(==|!=|<=|>=|<|>)"
        },
        {
          "name": "keyword.operator.logical.rtmc",
          "match": "(&&|\\|\\||!)"
        },
        {
          "name": "keyword.operator.bitwise.rtmc",
          "match": "(&|\\||\\^|~|<<|>>)"
        },
        {
          "name": "keyword.operator.arithmetic.rtmc",
          "match": "(\\+|-|\\*|/|%|\\+\\+|--)"
        },
        {
          "name": "keyword.operator.other.rtmc",
          "match": "(\\?|:|\\.|->|sizeof)"
        }
      ]
    },
    "preprocessor": {
      "patterns": [
        {
          "name": "meta.preprocessor.rtmc",
          "begin": "^\\s*#",
          "end": "$",
          "patterns": [
            {
              "name": "keyword.control.preprocessor.rtmc",
              "match": "\\b(include|define|undef|if|ifdef|ifndef|else|elif|endif|pragma)\\b"
            }
          ]
        }
      ]
    },
    "identifiers": {
      "patterns": [
        {
          "name": "variable.other.rtmc",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        }
      ]
    }
  }
}
