// RT-Micro-C Message Passing Example
// This demonstrates the new message<T> syntax for inter-task communication

struct SensorData {
    int id;
    float temperature;
    int timestamp;
};

// Global message queues
message<int> ControlSignal;
message<SensorData> SensorReadings;

void sensor_task_run()
{
    int sensorPin = 25;
    int readingId = 0;
    
    HW_ADC_INIT(sensorPin);
    
    while (1)
    {
        // Read sensor data
        int rawValue = HW_ADC_READ(sensorPin);
        
        // Create sensor data packet
        struct SensorData reading;
        reading.id = readingId;
        reading.temperature = rawValue * 0.1;  // Convert to temperature
        reading.timestamp = 1000 + readingId;   // Simulated timestamp
        
        // Send sensor reading to processing task
        SensorReadings.send(reading);
        
        readingId = readingId + 1;
        
        print("Sensor: Sent reading");
        delay_ms(2000);  // Read every 2 seconds
    }
}

void processor_task_run()
{
    float temperatureThreshold = 25.0;
    
    while (1)
    {
        // Wait for sensor data
        struct SensorData data = SensorReadings.recv();
        
        print("Processor: Received sensor data");
        
        // Process the data
        if (data.temperature > temperatureThreshold)
        {
            // Send alert signal to control task
            ControlSignal.send(1);  // Alert signal
            print("Processor: Temperature alert sent");
        }
        else
        {
            // Send normal signal
            ControlSignal.send(0);  // Normal signal
        }
    }
}

void control_task_run()
{
    int alertPin = 13;
    int fanPin = 12;
    
    HW_GPIO_INIT(alertPin, 1);   // Output for alert LED
    HW_GPIO_INIT(fanPin, 1);     // Output for fan control
    
    while (1)
    {
        // Wait for control signal
        int signal = ControlSignal.recv();
        
        if (signal == 1)
        {
            // Alert condition
            HW_GPIO_SET(alertPin, 1);   // Turn on alert LED
            HW_GPIO_SET(fanPin, 1);     // Turn on fan
            print("Control: Alert mode activated");
        }
        else
        {
            // Normal condition
            HW_GPIO_SET(alertPin, 0);   // Turn off alert LED
            HW_GPIO_SET(fanPin, 0);     // Turn off fan
            print("Control: Normal mode");
        }
    }
}

void main()
{
    print("RT-Micro-C Message Passing System Starting");
    
    // Create sensor task
    int core1 = 0;
    int priority1 = 2;
    int stack_size1 = 1024;
    int task_id1 = 1;
    StartTask(stack_size1, core1, priority1, task_id1, sensor_task_run);
    
    // Create processor task
    int core2 = 1;
    int priority2 = 2;
    int stack_size2 = 1024;
    int task_id2 = 2;
    StartTask(stack_size2, core2, priority2, task_id2, processor_task_run);
    
    // Create control task
    int core3 = 1;
    int priority3 = 1;
    int stack_size3 = 1024;
    int task_id3 = 3;
    StartTask(stack_size3, core3, priority3, task_id3, control_task_run);
    
    while (1)
    {
        delay_ms(10000);
        print("Main: System heartbeat");
    }
}
