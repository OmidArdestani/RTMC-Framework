// Test union bitfield sharing with comprehensive values
struct UnionTest {
    union {
        struct {
            int item1:16;  // Lower 16 bits
            int item2:16;  // Upper 16 bits
        };
        int value;
    };
};

main() {
    struct UnionTest ut;
    
    print("=== Union Bitfield Test ===");
    
    // Test 1: Set value with both upper and lower bits
    ut.value = 0x12345678;
    printf("After setting value=0x12345678:");
    printf("  item1={0} (hex: 0x{0:X}), item2={1} (hex: 0x{1:X})", ut.item1, ut.item2);
    printf("  Expected: item1=0x5678, item2=0x1234");
    
    // Test 2: Set individual bitfields and check value
    ut.item1 = 0xAABB;
    ut.item2 = 0xCCDD;
    printf("After setting item1=0xAABB, item2=0xCCDD:");
    printf("  value={0} (hex: 0x{0:X})", ut.value);
    printf("  Expected: value=0xCCDDAABB");
    
    print("=== Test Complete ===");
}
