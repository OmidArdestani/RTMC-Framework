// Advanced RT-Micro-C Task System Example
// Shows multiple tasks with bit-fields, structs, and hardware interaction

struct SensorData {
    int temperature : 8;    // -128 to 127
    int humidity : 7;       // 0-100% 
    int pressure : 12;      // 0-4095 range
    int valid : 1;          // validity flag
    int reserved : 4;       // padding
};

// Global shared sensor data (in real system, protected by mutex)
struct SensorData globalSensors;

void HighPriorityController() {
    static int emergencyThreshold = 80;
    
    while (1) {
        // High priority safety check
        if (globalSensors.temperature > emergencyThreshold) {
            print("EMERGENCY: Temperature critical!");
            HW_GPIO_SET(25, 1);  // Emergency LED
        } else {
            HW_GPIO_SET(25, 0);  // Turn off emergency LED
        }
        
        delay_ms(100);  // Fast monitoring
    }
}

void SensorReader() {
    static int sensorPin = 26;
    static int readInterval = 1000;
    
    HW_ADC_INIT(sensorPin);
    
    while (1) {
        // Read and pack sensor data using bit-fields
        int raw_temp = HW_ADC_READ(sensorPin);
        
        // Convert to temperature (simplified)
        int temperature = (raw_temp * 100) / 4095;
        
        // Update shared sensor data
        globalSensors.temperature = temperature;
        globalSensors.humidity = 65;      // Mock data
        globalSensors.pressure = 1013;    // Mock atmospheric pressure
        globalSensors.valid = 1;          // Mark as valid
        
        print("Sensor data updated");
        delay_ms(readInterval);
    }
}

void DisplayTask() {
    static int displayInterval = 2000;
    
    while (1) {
        if (globalSensors.valid) {
            print("Temperature readings available");
            print("System status: OK");
        } else {
            print("Waiting for sensor data...");
        }
        
        delay_ms(displayInterval);
    }
}

void main() {
    // Initialize shared data
    globalSensors.temperature = 0;
    globalSensors.humidity = 0;
    globalSensors.pressure = 0;
    globalSensors.valid = 0;
    
    // Initialize hardware
    HW_GPIO_INIT(25, 1);  // Emergency LED as output
    
    print("Advanced RT-Micro-C Task System Starting");
    
    // Start tasks with appropriate stack sizes, cores, priorities, and IDs
    StartTask(1024, 0, 1, 1, HighPriorityController);  // Higher stack for controller
    StartTask(2048, 1, 3, 2, SensorReader);            // Larger stack for sensor processing
    StartTask(1024, 0, 5, 3, DisplayTask);             // Standard stack for display
    
    print("All tasks started successfully");
    
    // Main system loop
    while (1) {
        delay_ms(10000);
        print("System heartbeat - all tasks running");
    }
}
