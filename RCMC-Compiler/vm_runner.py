#!/usr/bin/env python3
"""
Mini-C Virtual Machine Runner
Executes bytecode files (.vmb) generated by the Mini-C compiler.
"""

import sys
import argparse
from pathlib import Path

# Add src directory to path
sys.path.insert(0, str(Path(__file__).parent / "src"))

from vm.virtual_machine import VirtualMachine
from bytecode.reader import BytecodeReader

def main():
    parser = argparse.ArgumentParser(description='Mini-C Virtual Machine')
    parser.add_argument('bytecode', help='Bytecode file (.vmb) to execute')
    parser.add_argument('-v', '--verbose', action='store_true', help='Verbose output')
    parser.add_argument('--debug', action='store_true', help='Enable debug mode')
    parser.add_argument('--trace', action='store_true', help='Trace instruction execution')
    
    args = parser.parse_args()
    
    try:
        # Read bytecode file
        if args.verbose:
            print(f"Loading bytecode file: {args.bytecode}")
        
        reader = BytecodeReader()
        program = reader.read(args.bytecode)
        
        if args.verbose:
            print(f"Program loaded: {len(program.instructions)} instructions")
        
        # Create and run virtual machine
        vm = VirtualMachine(debug=args.debug, trace=args.trace)
        vm.load_program(program)
        
        if args.verbose:
            print("Starting execution...")
        
        vm.run()
        
        if args.verbose:
            print("Execution completed successfully")
        
    except Exception as e:
        print(f"Runtime error: {e}")
        if args.verbose:
            import traceback
            traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main()
